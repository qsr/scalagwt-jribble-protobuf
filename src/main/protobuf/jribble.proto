// Generated file.  DO NOT EDIT!.
package jribble;

option java_package = "com.google.jribble.ast";
option java_outer_classname = "JribbleProtos";

message AST {
  extensions 1000 to max;
  enum MessageType {
    And = 1;
    Array = 2;
    ArrayInitializer = 3;
    ArrayLength = 4;
    ArrayRef = 5;
    Assignment = 6;
    BitAnd = 7;
    BitLShift = 8;
    BitNot = 9;
    BitOr = 10;
    BitRShift = 11;
    BitUnsignedRShift = 12;
    BitXor = 13;
    Block = 14;
    BooleanLiteral = 15;
    Break = 16;
    Cast = 17;
    CharLiteral = 18;
    ClassOf = 19;
    Conditional = 20;
    Constructor = 21;
    ConstructorCall = 22;
    Continue = 23;
    Divide = 24;
    DoubleLiteral = 25;
    Equal = 26;
    FieldDef = 27;
    FieldRef = 28;
    FloatLiteral = 29;
    Greater = 30;
    GreaterOrEqual = 31;
    If = 32;
    InstanceOf = 33;
    IntLiteral = 34;
    Lesser = 35;
    LesserOrEqual = 36;
    LongLiteral = 37;
    MethodCall = 38;
    MethodDef = 39;
    Minus = 40;
    Modulus = 41;
    Multiply = 42;
    NewArray = 43;
    NewCall = 44;
    Not = 45;
    NotEqual = 46;
    NullLiteral = 47;
    Or = 48;
    Package = 49;
    ParamDef = 50;
    Plus = 51;
    Primitive = 52;
    Ref = 53;
    Return = 54;
    Signature = 55;
    StaticFieldRef = 56;
    StaticMethodCall = 57;
    StringLiteral = 58;
    SuperRef = 59;
    Switch = 60;
    ThisRef = 61;
    Throw = 62;
    Try = 63;
    UnaryMinus = 64;
    VarDef = 65;
    VarRef = 66;
    Void = 67;
    While = 68;
  }
  required MessageType type = 1;
}

message And {
  extend AST {
    required And aST = 1000;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Array {
  extend AST {
    required Array aST = 1001;
  }
  required AST typ = 2;
}

message ArrayInitializer {
  extend AST {
    required ArrayInitializer aST = 1002;
  }
  required AST typ = 2;
  repeated AST elements = 3;
}

message ArrayLength {
  extend AST {
    required ArrayLength aST = 1003;
  }
  required AST on = 2;
}

message ArrayRef {
  extend AST {
    required ArrayRef aST = 1004;
  }
  required AST on = 2;
  required AST index = 3;
}

message Assignment {
  extend AST {
    required Assignment aST = 1005;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitAnd {
  extend AST {
    required BitAnd aST = 1006;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitLShift {
  extend AST {
    required BitLShift aST = 1007;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitNot {
  extend AST {
    required BitNot aST = 1008;
  }
  required AST expression = 2;
}

message BitOr {
  extend AST {
    required BitOr aST = 1009;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitRShift {
  extend AST {
    required BitRShift aST = 1010;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitUnsignedRShift {
  extend AST {
    required BitUnsignedRShift aST = 1011;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message BitXor {
  extend AST {
    required BitXor aST = 1012;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Block {
  extend AST {
    required Block aST = 1013;
  }
  repeated AST statements = 2;
}

message BooleanLiteral {
  extend AST {
    required BooleanLiteral aST = 1014;
  }
  required bool v = 2;
}

message Break {
  extend AST {
    required Break aST = 1015;
  }
  optional string label = 2;
}

message Cast {
  extend AST {
    required Cast aST = 1016;
  }
  required AST on = 2;
  required AST typ = 3;
}

message CharLiteral {
  extend AST {
    required CharLiteral aST = 1017;
  }
  required int32 v = 2;
}

message ClassOf {
  extend AST {
    required ClassOf aST = 1018;
  }
  required AST typ = 2;
}

message Conditional {
  extend AST {
    required Conditional aST = 1019;
  }
  required AST condition = 2;
  required AST typ = 3;
  required AST then = 4;
  required AST elsee = 5;
}

message Constructor {
  extend AST {
    required Constructor aST = 1020;
  }
  repeated string modifs = 2;
  required string name = 3;
  repeated AST params = 4;
  required AST body = 5;
}

message ConstructorCall {
  extend AST {
    required ConstructorCall aST = 1021;
  }
  required AST signature = 2;
  repeated AST params = 3;
}

message Continue {
  extend AST {
    required Continue aST = 1022;
  }
  optional string label = 2;
}

message Divide {
  extend AST {
    required Divide aST = 1023;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message DoubleLiteral {
  extend AST {
    required DoubleLiteral aST = 1024;
  }
  required double v = 2;
}

message Equal {
  extend AST {
    required Equal aST = 1025;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message FieldDef {
  extend AST {
    required FieldDef aST = 1026;
  }
  repeated string modifs = 2;
  required AST typ = 3;
  required string name = 4;
  optional AST value = 5;
}

message FieldRef {
  extend AST {
    required FieldRef aST = 1027;
  }
  required AST on = 2;
  required AST onType = 3;
  required string name = 4;
}

message FloatLiteral {
  extend AST {
    required FloatLiteral aST = 1028;
  }
  required float v = 2;
}

message Greater {
  extend AST {
    required Greater aST = 1029;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message GreaterOrEqual {
  extend AST {
    required GreaterOrEqual aST = 1030;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message If {
  extend AST {
    required If aST = 1031;
  }
  required AST condition = 2;
  required AST then = 3;
  optional AST elsee = 4;
}

message InstanceOf {
  extend AST {
    required InstanceOf aST = 1032;
  }
  required AST on = 2;
  required AST typ = 3;
}

message IntLiteral {
  extend AST {
    required IntLiteral aST = 1033;
  }
  required int32 v = 2;
}

message Lesser {
  extend AST {
    required Lesser aST = 1034;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message LesserOrEqual {
  extend AST {
    required LesserOrEqual aST = 1035;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message LongLiteral {
  extend AST {
    required LongLiteral aST = 1036;
  }
  required int64 v = 2;
}

message MethodCall {
  extend AST {
    required MethodCall aST = 1037;
  }
  required AST on = 2;
  required AST signature = 3;
  repeated AST params = 4;
}

message MethodDef {
  extend AST {
    required MethodDef aST = 1038;
  }
  repeated string modifs = 2;
  required AST returnType = 3;
  required string name = 4;
  repeated AST params = 5;
  optional AST body = 6;
}

message Minus {
  extend AST {
    required Minus aST = 1039;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Modulus {
  extend AST {
    required Modulus aST = 1040;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Multiply {
  extend AST {
    required Multiply aST = 1041;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message NewArray {
  extend AST {
    required NewArray aST = 1042;
  }
  required AST typ = 2;
  repeated group Dims = 3 {
    optional AST t = 13;
  }
}

message NewCall {
  extend AST {
    required NewCall aST = 1043;
  }
  required AST constructor = 2;
}

message Not {
  extend AST {
    required Not aST = 1044;
  }
  required AST expression = 2;
}

message NotEqual {
  extend AST {
    required NotEqual aST = 1045;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Or {
  extend AST {
    required Or aST = 1046;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Package {
  extend AST {
    required Package aST = 1047;
  }
  required string name = 2;
}

message ParamDef {
  extend AST {
    required ParamDef aST = 1048;
  }
  required string name = 2;
  required AST typ = 3;
}

message Plus {
  extend AST {
    required Plus aST = 1049;
  }
  required AST lhs = 2;
  required AST rhs = 3;
}

message Primitive {
  extend AST {
    required Primitive aST = 1050;
  }
  required string name = 2;
}

message Ref {
  extend AST {
    required Ref aST = 1051;
  }
  optional AST pkg = 2;
  required string name = 3;
}

message Return {
  extend AST {
    required Return aST = 1052;
  }
  optional AST expression = 2;
}

message Signature {
  extend AST {
    required Signature aST = 1053;
  }
  required AST on = 2;
  required string name = 3;
  repeated AST paramTypes = 4;
  required AST returnType = 5;
}

message StaticFieldRef {
  extend AST {
    required StaticFieldRef aST = 1054;
  }
  required AST on = 2;
  required string name = 3;
}

message StaticMethodCall {
  extend AST {
    required StaticMethodCall aST = 1055;
  }
  required AST classRef = 2;
  required AST signature = 3;
  repeated AST params = 4;
}

message StringLiteral {
  extend AST {
    required StringLiteral aST = 1056;
  }
  required string v = 2;
}

message Switch {
  extend AST {
    required Switch aST = 1057;
  }
  required AST expression = 2;
  repeated group Groups = 3 {
    required AST t0 = 13;
    required AST t1 = 23;
  }
  optional AST default = 4;
}

message Throw {
  extend AST {
    required Throw aST = 1058;
  }
  required AST expression = 2;
}

message Try {
  extend AST {
    required Try aST = 1059;
  }
  required AST block = 2;
  repeated group Catches = 3 {
    required AST t0 = 13;
    required string t1 = 23;
    required AST t2 = 33;
  }
  optional AST finalizer = 4;
}

message UnaryMinus {
  extend AST {
    required UnaryMinus aST = 1060;
  }
  required AST expression = 2;
}

message VarDef {
  extend AST {
    required VarDef aST = 1061;
  }
  required AST typ = 2;
  required string name = 3;
  optional AST value = 4;
}

message VarRef {
  extend AST {
    required VarRef aST = 1062;
  }
  required string name = 2;
}

message While {
  extend AST {
    required While aST = 1063;
  }
  optional string label = 2;
  required AST condition = 3;
  required AST block = 4;
}

message DeclaredType {
  extensions 1000 to max;
  enum MessageType {
    ClassDef = 1;
    InterfaceDef = 2;
  }
  required MessageType type = 1;
}

message ClassDef {
  extend DeclaredType {
    required ClassDef declaredType = 1000;
  }
  repeated string modifs = 2;
  required AST name = 3;
  optional AST ext = 4;
  repeated AST implements = 5;
  repeated AST body = 6;
}

message InterfaceDef {
  extend DeclaredType {
    required InterfaceDef declaredType = 1001;
  }
  repeated string modifs = 2;
  required AST name = 3;
  repeated AST ext = 4;
  repeated AST body = 5;
}

